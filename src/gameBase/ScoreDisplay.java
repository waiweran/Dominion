package gameBase;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeMap;

import cards.Card;
import cards.defaults.Curse;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;

/**
 * Runs the user's Dominion game.
 * Lets the user select the game mode.
 * Controls whether the program is running.
 * @author Nathaniel and jCochran
 * @version 07-24-2015
 */
public class ScoreDisplay {
	
	private static final File LOGO_FILE = new File("Images/dominion_logo.png");
	private static final String VICTORY_TOKEN_IMAGE = "Images/Tokens/vp5.png";

	private DominionGame game;
	private ArrayList<Scorer> scores;
	private Player winner;
	private boolean tied;

	/**
	 * Constructor for class ScoreDisplay - establish the JFrame
	 * Loads the window and moves it to the center of the screen.
	 */
	public ScoreDisplay(DominionGame g)	{			
		game = g;
	}
	
	/**
	 * Displays the players' scores in the GUI.
	 */
	public Pane displayScores() {
		calculateScores();
		return setupWindow();
	}

	/**
	 * Calculates scores for each player using Scorer data type.
	 */
	private void calculateScores() {
		scores = new ArrayList<Scorer>();
		tied = false;
		winner = game.players.get(0);
		for(Player p : game.players) {	
			Scorer scorer = new Scorer(p.getScore());
			for(Card c : p.deck.getDeck()) {
				if(c.isVictory() || c.equals(new Curse())) {
					scorer.addCard(c);
				}
			}
			if(p.getScore() > winner.getScore()) {
				winner = p;
				tied = false;
			}
			else if(p != winner && p.getScore() == winner.getScore()) {
				tied = true;
			}
			scores.add(scorer);
			if(winner == game.getGUI().getMyPlayer()) {
				winner.addPlayerWin();
			}
		}
	}
	
	/**
	 * Sets up the window to display scores in.
	 */
	private Pane setupWindow() {
		VBox root = new VBox();
		root.getChildren().addAll(getTopPane(), getCenterPane());
		return root;
	}

	/**
	 * Creates the top pane of the GUI.
	 * Contains Dominion logo.
	 * @return the top pane.
	 */
	private Pane getTopPane() {
		FlowPane topPane = new FlowPane();
		topPane.setAlignment(Pos.CENTER);
		topPane.getChildren().add(new ImageView(LOGO_FILE.toURI().toString()));
		topPane.setPadding(new Insets(15, 0, 0, 0));
		return topPane;
	}

	/**
	 * Sets up the center panel with score information.
	 * @return the center panel.
	 */
	private Pane getCenterPane() {
		BorderPane main = new BorderPane();
		VBox out1 = new VBox(30);
		VBox out2 = new VBox(30);
		main.setLeft(out1);
		main.setRight(out2);
		main.setPadding(new Insets(0, 20, 10, 20));
		for(Player p : game.players) {
			HBox player = new HBox(20);
			player.setAlignment(Pos.BOTTOM_CENTER);
			if(p.getPlayerNum() < 4) {
				out1.getChildren().add(player);
			}
			else {
				out2.getChildren().add(player);
			}
			VBox label = new VBox(20);
			Text win = new Text();
			if(!tied && winner.equals(p)) {
				win.setText("Winner!");
			}
			else {
				win.setText("  ...  ");
			}
			win.setStroke(Color.WHITE);
			win.setFill(Color.WHITE);
			Text name = new Text(p.getPlayerName());
			name.setStroke(Color.WHITE);
			name.setFill(Color.WHITE);
			Text score = new Text("" + scores.get(p.getPlayerNum() - 1).getTotal() + " Points");
			score.setStroke(Color.WHITE);
			score.setFill(Color.WHITE);
			label.getChildren().addAll(win, name, score);
			player.getChildren().add(label);

			for(Card c : scores.get(p.getPlayerNum() - 1)) {
				VBox cardView = new VBox();
				cardView.setAlignment(Pos.CENTER);
				int numCards = scores.get(p.getPlayerNum() - 1).getNum(c);
				int cardScore = numCards*c.getVictory();
				Text num = new Text(numCards + " " + c.getName());
				num.setStroke(Color.WHITE);
				num.setFill(Color.WHITE);
				Text val = new Text(cardScore + " Points");
				val.setStroke(Color.WHITE);
				val.setFill(Color.WHITE);
				cardView.getChildren().addAll(game.getGUI().getImage(c), num, val);
				player.getChildren().add(cardView);
			}
			if(scores.get(p.getPlayerNum() - 1).getTokenScore() > 0) {
				VBox tokenView = new VBox();
				tokenView.setAlignment(Pos.CENTER);
				Text tokens = new Text(scores.get(p.getPlayerNum() - 1).getTokenScore() + " Tokens");
				tokens.setStroke(Color.WHITE);
				tokens.setFill(Color.WHITE);
				tokenView.getChildren().addAll(game.getGUI().makeImage(VICTORY_TOKEN_IMAGE), tokens);
				player.getChildren().add(tokenView);
			}
		}
		return main;
	}

	/**
	 * Data type to save the scores generated by each type of card.
	 * @author Nathaniel Brooke
	 * @version 03-20-2017
	 */
	private class Scorer implements Iterable<Card> {

		private TreeMap<Card, Integer> scoreCards;
		private int totalScore;


		public Scorer(int total) {
			scoreCards = new TreeMap<>();
			totalScore = total;
		}
		
		public void addCard(Card c) {
			if(!scoreCards.containsKey(c)) {
				scoreCards.put(c, 1);
			}
			else {
				scoreCards.put(c, scoreCards.get(c) + 1);
			}
		}
		
		public int getNum(Card c) {
			return scoreCards.get(c);
		}
		
		public int getTotal() {
			return totalScore;
		}
		
		public int getTokenScore() {
			int total = 0;
			for(Card c : scoreCards.keySet()) {
				total += c.getVictory()*scoreCards.get(c);
			}
			return totalScore - total;
		}

		@Override
		public Iterator<Card> iterator() {
			return scoreCards.keySet().iterator();
		}
	}

}